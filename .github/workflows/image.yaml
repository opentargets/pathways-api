name: Build Docker Image

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
  workflow_call:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: opentargets/pathways-api

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Try to download bundle artifact
      id: download-bundle
      uses: actions/download-artifact@v4
      with:
        name: bundle
        path: bundle
      continue-on-error: true

    - name: Check if bundle exists
      id: check-bundle
      run: |
        if [ -d "bundle" ] && [ -f "bundle/bundle.tar.gz" ]; then
          echo "bundle-exists=true" >> $GITHUB_OUTPUT
        else
          echo "bundle-exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Build bundle if not available
      if: steps.check-bundle.outputs.bundle-exists == 'false'
      run: |
        # Set up Python
        python -m pip install --upgrade pip
        pip install uv
        
        # Install dependencies
        uv sync
        
        # Set up Node.js
        curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
        sudo apt-get install -y nodejs
        
        # Install frontend dependencies
        cd ui
        npm install
        
        # Build frontend
        npm run build
        cd ..
        
        # Create bundle
        mkdir -p bundle
        cp -r app bundle/
        cp -r ui bundle/
        cp pyproject.toml bundle/
        cp uv.lock bundle/
        cp Dockerfile bundle/
        cp .dockerignore bundle/
        cp docker-compose.yml bundle/
        cp nginx.conf bundle/
        cp Makefile bundle/
        cp README.md bundle/
        
        # Create tar.gz archive
        cd bundle
        tar -czf ../bundle.tar.gz .
        cd ..
        rm -rf bundle
        mkdir bundle
        mv bundle.tar.gz bundle/

    - name: Extract bundle
      run: |
        if [ -f "bundle/bundle.tar.gz" ]; then
          cd bundle
          tar -xzf bundle.tar.gz
          rm bundle.tar.gz
        else
          echo "Bundle already extracted or not in tar.gz format"
        fi

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./bundle
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
